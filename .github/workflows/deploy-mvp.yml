name: Deploy MVP - Fast & Reliable
# Guaranteed deployment in < 10 minutes with simplified components

on:
  push:
    branches: [main, develop]
    paths:
      - 'lambdas/**'
      - 'template-mvp-fast-deploy.yaml'
      - '.github/workflows/deploy-mvp.yml'
  pull_request:
    branches: [main]
    paths:
      - 'lambdas/**'
      - 'template-mvp-fast-deploy.yaml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options: [dev, staging, prod]
      force_deploy:
        description: 'Force deployment even if validations fail'
        required: false
        default: false
        type: boolean

env:
  AWS_DEFAULT_REGION: us-east-1
  SAM_CLI_TELEMETRY: 0
  PYTHONUNBUFFERED: 1

jobs:
  # Quick validation job - must complete in < 2 minutes
  validate:
    name: Fast Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.checks.outputs.should_deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          
      - name: Fast validation checks
        id: checks
        run: |
          echo "🔍 Running fast validation checks..."
          
          # Check required files exist
          if [ ! -f "template-mvp-fast-deploy.yaml" ]; then
            echo "❌ MVP template missing"
            exit 1
          fi
          
          if [ ! -f "lambdas/requirements-mvp.txt" ]; then
            echo "❌ MVP requirements missing"
            exit 1
          fi
          
          # Check Lambda handlers exist
          REQUIRED_HANDLERS=(
            "lambdas/mvp-ingest-handler.py"
            "lambdas/mvp-event-processor.py" 
            "lambdas/mvp-api-authorizer.py"
          )
          
          for handler in "${REQUIRED_HANDLERS[@]}"; do
            if [ ! -f "$handler" ]; then
              echo "❌ Missing handler: $handler"
              exit 1
            fi
          done
          
          # Quick YAML syntax check
          python -c "import yaml; yaml.safe_load(open('template-mvp-fast-deploy.yaml'))"
          
          echo "✅ All validation checks passed"
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          
      - name: Prepare minimal requirements
        run: |
          echo "📦 Setting up minimal requirements for fast build..."
          cp lambdas/requirements-mvp.txt lambdas/requirements.txt

  # Fast deployment job - must complete in < 8 minutes  
  deploy:
    name: Deploy to ${{ needs.validate.outputs.environment }}
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true' || github.event.inputs.force_deploy == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: ${{ needs.validate.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Install SAM CLI (fast)
        run: |
          echo "⚡ Installing SAM CLI..."
          pip install aws-sam-cli --upgrade --no-warn-script-location
          sam --version
          
      - name: Prepare deployment
        run: |
          echo "📦 Preparing for fast deployment..."
          
          # Use minimal requirements for speed
          cp lambdas/requirements-mvp.txt lambdas/requirements.txt
          
          # Set stack name
          echo "STACK_NAME=formbridge-mvp-${{ needs.validate.outputs.environment }}" >> $GITHUB_ENV
          
      - name: SAM Build (optimized for speed)
        run: |
          echo "🔨 Building SAM application (x86_64 for speed)..."
          sam build \
            --template-file template-mvp-fast-deploy.yaml \
            --use-container false \
            --cached \
            --parallel
            
      - name: Deploy CloudFormation Stack
        run: |
          echo "🚀 Deploying stack: $STACK_NAME"
          
          sam deploy \
            --template-file template-mvp-fast-deploy.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides Environment=${{ needs.validate.outputs.environment }} \
            --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --resolve-s3
            
      - name: Quick smoke test
        run: |
          echo "🧪 Running quick smoke test..."
          
          # Get API endpoint
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text)
          
          echo "API_ENDPOINT=$API_ENDPOINT" >> $GITHUB_ENV
          
          # Quick health check (OPTIONS for CORS)
          if curl -f -s -X OPTIONS "$API_ENDPOINT/submit" \
            -H "Access-Control-Request-Method: POST" \
            -H "Access-Control-Request-Headers: Content-Type,X-Tenant-ID,X-API-Key" \
            --max-time 10; then
            echo "✅ API Gateway responding to CORS preflight"
          else
            echo "⚠️  CORS preflight failed, but continuing (might be normal)"
          fi
          
      - name: Output deployment info
        run: |
          echo "🎉 Deployment completed successfully!"
          echo ""
          echo "📊 Stack Information:"
          echo "Stack Name: $STACK_NAME"
          echo "Environment: ${{ needs.validate.outputs.environment }}"
          echo "API Endpoint: $API_ENDPOINT"
          echo ""
          
          # Get all stack outputs
          echo "📋 All Stack Outputs:"
          aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue,Description]' \
            --output table
            
      - name: Test command instructions
        run: |
          echo ""
          echo "🧪 Test your deployed API:"
          echo "curl -X POST $API_ENDPOINT/submit \\"
          echo '  -H "Content-Type: application/json" \'
          echo '  -H "X-Tenant-ID: t_sample" \'
          echo '  -H "X-API-Key: mvp-test-key-123" \'
          echo '  -d '"'"'{"form_data": {"name": "GitHub Actions", "email": "test@formbridge.dev"}, "form_type": "contact"}'"'"
          echo ""
          echo "🔍 Monitor logs:"
          echo "aws logs tail /aws/lambda/formbridge-mvp-ingest-${{ needs.validate.outputs.environment }} --follow"

  # Cleanup job for dev environment (optional)
  cleanup-dev:
    name: Cleanup Dev Environment
    needs: [validate, deploy]
    if: needs.validate.outputs.environment == 'dev' && github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Cleanup dev stack
        run: |
          STACK_NAME="formbridge-mvp-dev"
          
          if aws cloudformation describe-stacks --stack-name $STACK_NAME &> /dev/null; then
            echo "🗑️ Cleaning up dev environment stack..."
            aws cloudformation delete-stack --stack-name $STACK_NAME
            
            echo "⏳ Waiting for stack deletion..."
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME --timeout 300
            
            echo "✅ Dev environment cleaned up"
          else
            echo "ℹ️ No dev stack to cleanup"
          fi