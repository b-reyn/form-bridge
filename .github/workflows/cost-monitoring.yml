name: Cost Monitoring & Alerts

on:
  schedule:
    # Run daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  COST_THRESHOLD: 5.00
  WARNING_THRESHOLD: 3.00

jobs:
  cost-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check current month costs
        id: cost-check
        run: |
          # Calculate date range for current month
          START_DATE=$(date -d "$(date +%Y-%m-01)" +%Y-%m-%d)
          END_DATE=$(date +%Y-%m-%d)
          
          echo "Checking Form-Bridge costs from $START_DATE to $END_DATE..."
          
          # Get total cost for Form-Bridge Ultra resources
          TOTAL_COST=$(aws ce get-cost-and-usage \
            --time-period Start="$START_DATE",End="$END_DATE" \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --filter '{
              "And": [
                {"Dimensions": {"Key": "SERVICE", "Values": ["Amazon DynamoDB", "AWS Lambda", "Amazon CloudWatch Logs"]}},
                {"Or": [
                  {"Dimensions": {"Key": "RESOURCE_ID", "MatchOptions": ["CONTAINS"], "Values": ["form-bridge-ultra"]}},
                  {"Tags": {"Key": "Project", "Values": ["FormBridge-Ultra"]}}
                ]}
              ]
            }' \
            --query 'ResultsByTime[0].Total.BlendedCost.Amount' \
            --output text 2>/dev/null || echo "0.00")
          
          # Get costs by service
          SERVICE_COSTS=$(aws ce get-cost-and-usage \
            --time-period Start="$START_DATE",End="$END_DATE" \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --filter '{
              "And": [
                {"Dimensions": {"Key": "SERVICE", "Values": ["Amazon DynamoDB", "AWS Lambda", "Amazon CloudWatch Logs"]}},
                {"Or": [
                  {"Dimensions": {"Key": "RESOURCE_ID", "MatchOptions": ["CONTAINS"], "Values": ["form-bridge-ultra"]}},
                  {"Tags": {"Key": "Project", "Values": ["FormBridge-Ultra"]}}
                ]}
              ]
            }' \
            --query 'ResultsByTime[0].Groups[?Metrics.BlendedCost.Amount>`0.01`].[Keys[0],Metrics.BlendedCost.Amount]' \
            --output table 2>/dev/null || echo "No service costs found")
          
          echo "total-cost=$TOTAL_COST" >> $GITHUB_OUTPUT
          echo "service-costs<<EOF" >> $GITHUB_OUTPUT
          echo "$SERVICE_COSTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Create summary
          echo "### Form-Bridge Ultra-Simple Cost Report" >> $GITHUB_STEP_SUMMARY
          echo "**Date Range:** $START_DATE to $END_DATE" >> $GITHUB_STEP_SUMMARY
          echo "**Total Cost:** \$$TOTAL_COST" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Costs by Service:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$SERVICE_COSTS" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Check resource usage
        run: |
          echo "### Resource Usage Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check Lambda invocations (last 30 days)
          END_TIME=$(date -u +%Y-%m-%dT%H:%M:%S)
          START_TIME=$(date -u -d '30 days ago' +%Y-%m-%dT%H:%M:%S)
          
          # Get Lambda metrics
          LAMBDA_INVOCATIONS=$(aws cloudwatch get-metric-statistics \
            --namespace AWS/Lambda \
            --metric-name Invocations \
            --dimensions Name=FunctionName,Value=form-bridge-ultra-test \
            --start-time "$START_TIME" \
            --end-time "$END_TIME" \
            --period 2592000 \
            --statistics Sum \
            --query 'Datapoints[0].Sum' \
            --output text 2>/dev/null || echo "0")
          
          LAMBDA_DURATION=$(aws cloudwatch get-metric-statistics \
            --namespace AWS/Lambda \
            --metric-name Duration \
            --dimensions Name=FunctionName,Value=form-bridge-ultra-test \
            --start-time "$START_TIME" \
            --end-time "$END_TIME" \
            --period 2592000 \
            --statistics Average \
            --query 'Datapoints[0].Average' \
            --output text 2>/dev/null || echo "0")
          
          echo "**Lambda Function (Last 30 Days):**" >> $GITHUB_STEP_SUMMARY
          echo "- Invocations: $LAMBDA_INVOCATIONS" >> $GITHUB_STEP_SUMMARY
          echo "- Average Duration: ${LAMBDA_DURATION}ms" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check DynamoDB usage
          TABLE_SIZE=$(aws dynamodb describe-table \
            --table-name form-bridge-ultra-test \
            --query 'Table.TableSizeBytes' \
            --output text 2>/dev/null || echo "0")
          
          ITEM_COUNT=$(aws dynamodb describe-table \
            --table-name form-bridge-ultra-test \
            --query 'Table.ItemCount' \
            --output text 2>/dev/null || echo "0")
          
          echo "**DynamoDB Table:**" >> $GITHUB_STEP_SUMMARY
          echo "- Table Size: $(( TABLE_SIZE / 1024 )) KB" >> $GITHUB_STEP_SUMMARY
          echo "- Item Count: $ITEM_COUNT" >> $GITHUB_STEP_SUMMARY

      - name: Cost threshold alerts
        env:
          TOTAL_COST: ${{ steps.cost-check.outputs.total-cost }}
        run: |
          # Convert costs to comparable numbers
          COST_NUMERIC=$(echo "$TOTAL_COST" | sed 's/[^0-9.]//g')
          
          if (( $(echo "$COST_NUMERIC > $COST_THRESHOLD" | bc -l) )); then
            echo "::error::🚨 COST ALERT: Monthly cost (\$$TOTAL_COST) exceeds threshold (\$$COST_THRESHOLD)"
            echo "::error::Consider implementing cost optimization measures or upgrading architecture"
            
            # Create an issue if costs are too high
            echo "### 🚨 Cost Alert" >> cost_alert.md
            echo "Current monthly cost: \$$TOTAL_COST" >> cost_alert.md
            echo "Threshold: \$$COST_THRESHOLD" >> cost_alert.md
            echo "" >> cost_alert.md
            echo "#### Recommended Actions:" >> cost_alert.md
            echo "1. Review Lambda execution patterns" >> cost_alert.md
            echo "2. Optimize DynamoDB usage" >> cost_alert.md
            echo "3. Consider Reserved Capacity for DynamoDB if usage is consistent" >> cost_alert.md
            echo "4. Review CloudWatch log retention settings" >> cost_alert.md
            
            exit 1
            
          elif (( $(echo "$COST_NUMERIC > $WARNING_THRESHOLD" | bc -l) )); then
            echo "::warning::⚠️  Cost approaching threshold: \$$TOTAL_COST (threshold: \$$COST_THRESHOLD)"
            echo "Monitor usage closely to avoid exceeding budget."
            
          else
            echo "✅ Costs within acceptable range: \$$TOTAL_COST"
          fi

      - name: Usage optimization recommendations
        run: |
          echo "### Cost Optimization Tips" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Current Architecture Benefits:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Using lowest cost Lambda tier (128MB)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ DynamoDB on-demand billing (pay only for usage)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TTL enabled for automatic data cleanup" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ No API Gateway costs (using Lambda Function URLs)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ No S3 or CloudFront costs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### If Costs Increase:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Lambda:** Optimize function duration, consider provisioned concurrency only if needed" >> $GITHUB_STEP_SUMMARY
          echo "2. **DynamoDB:** Monitor read/write patterns, consider reserved capacity at scale" >> $GITHUB_STEP_SUMMARY
          echo "3. **CloudWatch:** Reduce log retention period if not needed for compliance" >> $GITHUB_STEP_SUMMARY
          echo "4. **Monitoring:** Set up billing alerts in AWS Console" >> $GITHUB_STEP_SUMMARY

  # Send notification on cost alerts (optional)
  notify-on-alert:
    runs-on: ubuntu-latest
    needs: cost-monitoring
    if: failure()
    steps:
      - name: Send alert notification
        run: |
          echo "Cost monitoring failed - this indicates costs may have exceeded thresholds"
          echo "Check the cost-monitoring job output for details"
          # Add Slack/email notification here if needed
          # Example: curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"Form-Bridge costs exceeded threshold!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}