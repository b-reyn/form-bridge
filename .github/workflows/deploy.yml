name: Deploy Form-Bridge Infrastructure

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options: ['dev', 'staging', 'prod']

permissions:
  id-token: write
  contents: read

env:
  AWS_DEFAULT_REGION: us-east-1
  SAM_TEMPLATE: template-arm64-optimized.yaml

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT  
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cfn-lint pytest boto3
          
      - name: Validate CloudFormation templates
        run: |
          cfn-lint infrastructure/*.yaml
          cfn-lint $SAM_TEMPLATE
          
      - name: Run unit tests
        run: |
          if [ -f requirements-test.txt ]; then
            pip install -r requirements-test.txt
          fi
          pytest tests/unit/ -v --tb=short

  deploy:
    runs-on: ubuntu-latest
    needs: validate
    environment: ${{ needs.validate.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          
      - name: Cache SAM build
        uses: actions/cache@v3
        with:
          path: |
            .aws-sam
            ~/.cache/pip
          key: ${{ runner.os }}-sam-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-sam-
            
      - name: Deploy infrastructure prerequisites
        run: |
          # Get AWS Account ID
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS Account ID: $AWS_ACCOUNT_ID"
          
          # Deploy deployment bucket if not exists
          DEPLOYMENT_BUCKET="formbridge-deployment-$AWS_ACCOUNT_ID"
          echo "Target deployment bucket: $DEPLOYMENT_BUCKET"
          
          # Check if stack exists and its status
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name formbridge-deployment-bucket --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_EXISTS")
          
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Previous stack creation failed, deleting and recreating..."
            aws cloudformation delete-stack --stack-name formbridge-deployment-bucket
            aws cloudformation wait stack-delete-complete --stack-name formbridge-deployment-bucket
            STACK_STATUS="NOT_EXISTS"
          fi
          
          if [ "$STACK_STATUS" = "NOT_EXISTS" ]; then
            echo "Creating deployment bucket stack..."
            aws cloudformation create-stack \
              --stack-name formbridge-deployment-bucket \
              --template-body file://infrastructure/deployment-bucket.yaml \
              --tags Key=Application,Value=FormBridge Key=Environment,Value=${{ needs.validate.outputs.environment }}
            
            echo "Waiting for stack creation to complete..."
            aws cloudformation wait stack-create-complete \
              --stack-name formbridge-deployment-bucket
            echo "Deployment bucket stack created successfully"
          else
            echo "Deployment bucket stack exists with status: $STACK_STATUS"
          fi
          
          # Verify bucket exists
          if aws s3api head-bucket --bucket $DEPLOYMENT_BUCKET 2>/dev/null; then
            echo "Deployment bucket $DEPLOYMENT_BUCKET is ready"
          else
            echo "ERROR: Deployment bucket $DEPLOYMENT_BUCKET not accessible"
            exit 1
          fi
          
          # Set for use in later steps
          echo "DEPLOYMENT_BUCKET=$DEPLOYMENT_BUCKET" >> $GITHUB_ENV
          
      - name: Validate SAM template
        run: sam validate --template $SAM_TEMPLATE
        
      - name: Build SAM application
        run: |
          sam build \
            --template $SAM_TEMPLATE \
            --parallel
            
      - name: Deploy SAM application
        run: |
          STACK_NAME="formbridge-${{ needs.validate.outputs.environment }}"
          echo "Using deployment bucket: $DEPLOYMENT_BUCKET"
          echo "Deploying to stack: $STACK_NAME"
          
          sam deploy \
            --stack-name $STACK_NAME \
            --s3-bucket $DEPLOYMENT_BUCKET \
            --s3-prefix sam-deployments/${{ needs.validate.outputs.environment }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              Environment=${{ needs.validate.outputs.environment }} \
              ProjectName=FormBridge \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --tags \
              Application=FormBridge \
              Environment=${{ needs.validate.outputs.environment }} \
              GitCommit=${{ github.sha }} \
              DeployedBy=GitHubActions
              
      - name: Get stack outputs
        id: stack-outputs
        run: |
          STACK_NAME="formbridge-${{ needs.validate.outputs.environment }}"
          
          # Get API Gateway endpoint
          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayEndpoint`].OutputValue' \
            --output text)
          echo "api-endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
          
          # Get other key outputs if they exist
          EVENTBRIDGE_BUS=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`EventBridgeBusName`].OutputValue' \
            --output text)
          echo "eventbridge-bus=$EVENTBRIDGE_BUS" >> $GITHUB_OUTPUT
          
      - name: Run smoke tests
        run: |
          API_ENDPOINT="${{ steps.stack-outputs.outputs.api-endpoint }}"
          if [ -n "$API_ENDPOINT" ]; then
            echo "Testing API health endpoint..."
            curl -f "$API_ENDPOINT/health" || echo "Health check failed, but continuing..."
          fi
          
      - name: Post deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.validate.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Stack Name**: formbridge-${{ needs.validate.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API Endpoint**: ${{ steps.stack-outputs.outputs.api-endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **EventBridge Bus**: ${{ steps.stack-outputs.outputs.eventbridge-bus }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed At**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  integration-tests:
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: needs.validate.outputs.environment == 'dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install test dependencies
        run: |
          pip install -r requirements-test.txt
          
      - name: Run integration tests
        run: |
          STACK_NAME="formbridge-${{ needs.validate.outputs.environment }}"
          export FORMBRIDGE_STACK_NAME=$STACK_NAME
          pytest tests/integration/ -v --tb=short
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            *.xml