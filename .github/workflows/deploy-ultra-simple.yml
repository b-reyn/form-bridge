name: Deploy Ultra-Simple Form Bridge
# Guaranteed deployment in < 5 minutes with minimal components

on:
  push:
    branches: [main, develop]
    paths:
      - 'ultra-simple/**'
      - '.github/workflows/deploy-ultra-simple.yml'
  pull_request:
    branches: [main]
    paths:
      - 'ultra-simple/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'test'
        type: choice
        options: [test, prod]
      force_deploy:
        description: 'Force deployment even if validations fail'
        required: false
        default: false
        type: boolean

env:
  AWS_DEFAULT_REGION: us-east-1
  SAM_CLI_TELEMETRY: 0
  PYTHONUNBUFFERED: 1

jobs:
  # Quick validation job - must complete in < 1 minute
  validate:
    name: Fast Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.checks.outputs.should_deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=test" >> $GITHUB_OUTPUT
          fi
          
      - name: Fast validation checks
        id: checks
        run: |
          echo "üîç Running fast validation checks for ultra-simple architecture..."
          
          # Check required files exist
          if [ ! -f "ultra-simple/template-minimal.yaml" ]; then
            echo "‚ùå Ultra-simple template missing"
            exit 1
          fi
          
          if [ ! -f "ultra-simple/requirements.txt" ]; then
            echo "‚ùå Ultra-simple requirements missing"
            exit 1
          fi
          
          if [ ! -f "ultra-simple/handler.py" ]; then
            echo "‚ùå Ultra-simple handler missing"
            exit 1
          fi
          
          # Quick YAML syntax check (CloudFormation intrinsic functions)
          # Skip YAML validation as CloudFormation uses special intrinsic functions
          echo "‚ö†Ô∏è  Skipping YAML validation (CloudFormation template with intrinsic functions)"
          
          # Quick Python syntax check
          python -m py_compile ultra-simple/handler.py
          
          echo "‚úÖ All validation checks passed"
          echo "should_deploy=true" >> $GITHUB_OUTPUT

  # Fast deployment job - must complete in < 5 minutes  
  deploy:
    name: Deploy to ${{ needs.validate.outputs.environment }}
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true' || github.event.inputs.force_deploy == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 8
    environment: ${{ needs.validate.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install SAM CLI (fast)
        run: |
          echo "‚ö° Installing SAM CLI..."
          pip install aws-sam-cli --upgrade --no-warn-script-location
          sam --version
          
      - name: Prepare deployment
        run: |
          echo "üì¶ Preparing ultra-simple deployment..."
          
          # Set stack name
          echo "STACK_NAME=form-bridge-ultra-${{ needs.validate.outputs.environment }}" >> $GITHUB_ENV
          
      - name: SAM Build (optimized for speed)
        run: |
          echo "üî® Building SAM application (ultra-simple architecture)..."
          cd ultra-simple
          sam build \
            --template-file template-minimal.yaml \
            --cached \
            --parallel
            
      - name: Clean up failed stack (if needed)
        run: |
          echo "üßπ Checking for existing stack in failed state..."
          cd ultra-simple
          
          # Check if stack exists and is in a failed state
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_FOUND")
          
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "CREATE_FAILED" ] || [ "$STACK_STATUS" = "UPDATE_ROLLBACK_COMPLETE" ]; then
            echo "‚ö†Ô∏è Found stack in failed state: $STACK_STATUS"
            echo "üóëÔ∏è Deleting failed stack to allow fresh deployment..."
            
            aws cloudformation delete-stack --stack-name $STACK_NAME
            
            echo "‚è≥ Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME --region us-east-1
            
            echo "‚úÖ Stack deleted successfully"
          elif [ "$STACK_STATUS" = "NOT_FOUND" ]; then
            echo "‚ÑπÔ∏è No existing stack found - proceeding with fresh deployment"
          else
            echo "‚ÑπÔ∏è Existing stack in good state: $STACK_STATUS - proceeding with update"
          fi

      - name: Deploy CloudFormation Stack
        run: |
          echo "üöÄ Deploying ultra-simple stack: $STACK_NAME"
          cd ultra-simple
          
          sam deploy \
            --template-file .aws-sam/build/template.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides Environment=${{ needs.validate.outputs.environment }} \
            --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --resolve-s3
            
      - name: Get deployment outputs
        id: outputs
        run: |
          echo "üìã Getting stack outputs..."
          
          # Get Lambda Function URL
          FUNCTION_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionUrl`].OutputValue' \
            --output text)
          
          echo "FUNCTION_URL=$FUNCTION_URL" >> $GITHUB_ENV
          echo "function_url=$FUNCTION_URL" >> $GITHUB_OUTPUT
          
          # Get DynamoDB Table
          TABLE_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`DynamoDBTable`].OutputValue' \
            --output text)
          
          echo "TABLE_NAME=$TABLE_NAME" >> $GITHUB_ENV
          
      - name: Quick smoke test
        run: |
          echo "üß™ Running quick smoke test..."
          
          # Test CORS preflight
          echo "Testing CORS preflight..."
          if curl -f -s -X OPTIONS "$FUNCTION_URL" \
            -H "Access-Control-Request-Method: POST" \
            -H "Access-Control-Request-Headers: Content-Type,X-Signature,X-Timestamp" \
            --max-time 10; then
            echo "‚úÖ CORS preflight successful"
          else
            echo "‚ö†Ô∏è  CORS preflight failed (check Lambda logs)"
          fi
          
          # Test actual submission (with HMAC auth)
          echo ""
          echo "Testing form submission..."
          TIMESTAMP=$(date +%s)
          PAYLOAD='{"form_data":{"test":"github-actions","timestamp":"'$TIMESTAMP'"}}'
          SIGNATURE=$(echo -n "$TIMESTAMP:$PAYLOAD" | openssl dgst -sha256 -hmac 'development-secret-change-in-production' | cut -d' ' -f2)
          
          RESPONSE=$(curl -s -X POST "$FUNCTION_URL" \
            -H "Content-Type: application/json" \
            -H "X-Signature: $SIGNATURE" \
            -H "X-Timestamp: $TIMESTAMP" \
            -d "$PAYLOAD" \
            --max-time 10)
          
          if echo "$RESPONSE" | grep -q '"success":true'; then
            echo "‚úÖ Form submission successful"
            echo "Response: $RESPONSE"
          else
            echo "‚ö†Ô∏è  Form submission may have failed"
            echo "Response: $RESPONSE"
          fi
          
      - name: Output deployment info
        run: |
          echo "üéâ Ultra-Simple Form Bridge deployed successfully!"
          echo ""
          echo "üìä Stack Information:"
          echo "Stack Name: $STACK_NAME"
          echo "Environment: ${{ needs.validate.outputs.environment }}"
          echo "Lambda Function URL: $FUNCTION_URL"
          echo "DynamoDB Table: $TABLE_NAME"
          echo ""
          
          # Get all stack outputs
          echo "üìã All Stack Outputs:"
          aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' \
            --output table
            
      - name: WordPress plugin instructions
        run: |
          echo ""
          echo "üîå WordPress Plugin Configuration:"
          echo "=================================="
          echo "Endpoint URL: $FUNCTION_URL"
          echo "HMAC Secret: development-secret-change-in-production"
          echo ""
          echo "Add to your WordPress plugin:"
          echo "define('FORM_BRIDGE_ENDPOINT', '$FUNCTION_URL');"
          echo "define('FORM_BRIDGE_SECRET', 'development-secret-change-in-production');"
          echo ""
          echo "üß™ Test command:"
          echo "curl -X POST $FUNCTION_URL \\"
          echo '  -H "Content-Type: application/json" \'
          echo '  -H "X-Signature: $(echo -n "$(date +%s):{\"form_data\":{\"name\":\"Test\",\"email\":\"test@example.com\"}}" | openssl dgst -sha256 -hmac "development-secret-change-in-production" | cut -d" " -f2)" \'
          echo '  -H "X-Timestamp: $(date +%s)" \'
          echo '  -d '"'"'{"form_data":{"name":"Test","email":"test@example.com"}}'"'"
          echo ""
          echo "üîç Monitor logs:"
          echo "aws logs tail /aws/lambda/form-bridge-ultra-${{ needs.validate.outputs.environment }} --follow"
          
      - name: Create deployment summary
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const functionUrl = '${{ env.FUNCTION_URL }}';
            const stackName = '${{ env.STACK_NAME }}';
            const environment = '${{ needs.validate.outputs.environment }}';
            
            const summary = `## üöÄ Ultra-Simple Form Bridge Deployed!
            
            ### Deployment Details
            - **Environment:** ${environment}
            - **Stack:** ${stackName}
            - **Endpoint:** ${functionUrl}
            
            ### WordPress Plugin Config
            \`\`\`php
            define('FORM_BRIDGE_ENDPOINT', '${functionUrl}');
            define('FORM_BRIDGE_SECRET', 'development-secret-change-in-production');
            \`\`\`
            
            ### Quick Test
            \`\`\`bash
            curl -X POST ${functionUrl} \\
              -H "Content-Type: application/json" \\
              -H "X-Signature: \$(echo -n "\$(date +%s):{}" | openssl dgst -sha256 -hmac 'development-secret-change-in-production' | cut -d' ' -f2)" \\
              -H "X-Timestamp: \$(date +%s)" \\
              -d '{"form_data":{"test":"data"}}'
            \`\`\`
            
            ### Cost Estimate
            **$0.00/month** (AWS Free Tier: 1M Lambda requests, 400K GB-seconds, 25GB DynamoDB)
            `;
            
            // Post comment on PR if this is a PR
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  # Cleanup job for test environment (optional)
  cleanup-test:
    name: Cleanup Test Environment
    needs: [validate, deploy]
    if: needs.validate.outputs.environment == 'test' && github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Cleanup test stack
        run: |
          STACK_NAME="form-bridge-ultra-test"
          
          if aws cloudformation describe-stacks --stack-name $STACK_NAME &> /dev/null; then
            echo "üóëÔ∏è Cleaning up test environment stack..."
            aws cloudformation delete-stack --stack-name $STACK_NAME
            
            echo "‚è≥ Waiting for stack deletion..."
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME --timeout 300 || true
            
            echo "‚úÖ Test environment cleaned up"
          else
            echo "‚ÑπÔ∏è No test stack to cleanup"
          fi